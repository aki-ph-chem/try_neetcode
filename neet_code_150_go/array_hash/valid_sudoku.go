package main

import "fmt"

// AC
func isValidSudoku(board [][]byte) bool {
	set_x := make([]map[byte]bool, 9)
	set_y := make([]map[byte]bool, 9)
	set_grid := make([]map[byte]bool, 9)

	for x := 0; x < 9; x++ {
		for y := 0; y < 9; y++ {
			c := board[x][y]
			if c != '.' {
				if set_x[x][c] || set_y[y][c] || set_grid[x/3+3*(y/3)][c] {
					return false
				} else {
					if set_x[x] == nil {
						set_x[x] = map[byte]bool{}
					}
					if set_y[y] == nil {
						set_y[y] = map[byte]bool{}
					}
					if set_grid[x/3+3*(y/3)] == nil {
						set_grid[x/3+3*(y/3)] = map[byte]bool{}
					}

					set_x[x][c] = true
					set_y[y][c] = true
					set_grid[x/3+3*(y/3)][c] = true

				}
			}
		}
	}

	return true
}

func main() {
	board_1 := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	// => true
	board_2 := [][]byte{
		{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	// => false

	fmt.Println("res_1: ", isValidSudoku(board_1))
	fmt.Println("res_2: ", isValidSudoku(board_2))
}
